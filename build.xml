<?xml version="1.0" encoding="UTF-8"?>

<!-- Installation instructions:

sudo pear channel-discover pear.phing.info
sudo pear install phing/phing
phing help

-->

<project name="buildtools" phingVersion="2.4.5">

	<!-- Load in the custom tasks -->
	<taskdef name="findRepos" classname="buildtools.src.FindRepositoriesTask" />
	<taskdef name="ssmodules" classname="buildtools.src.LoadModulesTask" />
	<taskdef name="sschangelog" classname="buildtools.src.CreateChangelog" />
	<taskdef name="updateTranslationsTask" classname="buildtools.src.UpdateTranslationsTask" />
	<property name="basedir" value="." override="true" />
	<property name="archiveDest" value="." />
	<property name="archiveName" value="SilverStripe" />
	<property name="frameworkdir" value="framework" />
	<property name="modules" value="${frameworkdir},cms" />
	<property name="modulesAndRoot" value=".,${modules}" />
	<property name="changelog.toCommit" value="${baseBranchName}" />

	<!-- 
		=================================================================
		Helper Targets
		=================================================================
	-->

	<target name="help">
		<echo>
SilverStripe Project Build
------------------------------------

This build file contains targets to assist in creating new SilverStripe builds and releases.
Run "phing -l" to get a full list of available targets.

Options:

-Dbasedir = . (the base directory to operate on)
-Dmodule (the name of the module directory used in various tasks)
-DarchiveName (the name of the created archive file)
-DarchiveDest (the destination directory to put the archive)
-DtagName (the name of the tag/branch to check out or to create as a new tag)
</echo>
	</target>

	<target name="release" 
		description="Wrapper task to handle a release"
		depends="setup,changelog,tag,archive,upload,teardown">
		<echo msg="### Done! Please do the following manually:" />
		<echo msg=" * Release announcement on mailinglist and forum" />
		<echo msg=" * Update silverstripe.org download links" />
		<echo msg=" * Close milestones in the issue tracker" />
		<echo msg=" * ... and more. See http://goo.gl/68pXb for instructions." />
	</target>

	<target name="setup">
		<propertyprompt propertyName="confirmNoLocalChanges" 
			promptText="This should be a fresh installation created through 'composer create-project'. It should NOT have local changes, local commits or unversioned files. Confirm?" />
		<propertyprompt propertyName="baseBranchName" 
			promptText="Base branch name?"
			useExistingValue="true"
			defaultValue="x.y" />
		<propertyprompt propertyName="tagName" 
			promptText="Tag name? Check http://goo.gl/1EDBJ for conventions"
			useExistingValue="true"
			defaultValue="x.y.z[-(alpha|beta|rc)]" />
		<property name="tmpBranchName" value="${tagName}-tmp" override="true" />
		<php expression="version_compare(preg_replace('/([\d\.]*)(.*)/', '$1', '${tagName}'), '3.0', '&lt;=')" returnProperty="versionLowerThan3x" />

		<echo msg="### Checking out ${baseBranchName}" />
		<property name="branchName" value="${baseBranchName}" override="true" />
		<foreach list="${modules}" param="module" target="module-check-changes" />
		<foreach list="${modules}" param="module" target="module-fetch" />
		<foreach list="${modules}" param="module" target="module-checkout" />
	</target>

	<target name="teardown">
		<echo msg="### Checking out ${baseBranchName}" />
		<property name="branchName" value="${baseBranchName}" override="true" />
		<foreach list="${modules}" param="module" target="module-checkout" />
	</target>

	<target name="tag"
		description="Tag each module and push tags"
		depends="setup">
		<echo msg="### Creating tags" />
		<foreach list="${modules},." param="module" target="module-create-tag" />
		<foreach list="${modules},." param="module" target="module-push-tag" />
	</target>

	<target name="module-check-changes" if="basedir,module" 
		description="Ensures that the module doesn't have any changes in the working copy">
		<exec command="git status --untracked-files=no --short" dir="${module}" outputProperty="git.status.${module}"/>
		<if>
			<istrue value="${git.status.${module}}" />
			<then>
				<fail message="Changes found in ${module}: ${git.status.${module}}. Aborting." />
			</then>
		</if>
	</target>

	<target name="module-checkout" 
		description="Checkout the specified branch on all working copies"
		if="baseBranchName,module">
		<!-- TODO Prompt for overwriting existing branch -->
		<echo msg="checking out ${module}"/>
		<exec command="git stash" dir="${module}" />
		<exec command="git checkout -B ${baseBranchName} origin/${baseBranchName}" checkreturn="true" dir="${module}" />
		<!-- <exec command="git stash pop" dir="${module}" /> -->
		<echo msg="Checked out ${baseBranchName} branch in '${module}' git repository" />
	</target>

	<target name="module-checkout-tag" 
		description="Checkout the specified tag on all working copies"
		if="baseBranchName,module">
		<!-- TODO Prompt for overwriting existing branch -->
		<echo msg="checking out ${module}"/>
		<exec command="git stash" dir="${module}" />
		<exec command="git checkout ${tagName}" checkreturn="true" dir="${module}" />
		<!-- <exec command="git stash pop" dir="${module}" /> -->
		<echo msg="Checked out ${tagName} tag '${module}' git repository" />
	</target>

	<target name="module-create-tag" if="basedir,module,tagName" 
		description="Creates a new git tag in the chosen repo">
		<!-- TODO Prompt for overwriting existing tag -->
		<!-- Force commit to ensure packagist release date is accurate -->
		<gittag repository="${module}" name="${tagName}" force="true" annotate="true" message="Tagged ${tagName}" />
		<echo msg="git tag '${tagName}' added to '${module}' git repository" />
	</target>

	<target name="module-push-tag" if="basedir,module,tagName" 
		description="Pushes all local tags to their respective origin repositories">
		<gitpush refspec="+refs/heads/${baseBranchName}" repository="${module}" />
		<gitpush refspec="+refs/tags/${tagName}" force="true" repository="${module}" />
		<echo msg="Pushed tags for '${module}'" />
	</target>

	<target name="module-fetch" if="basedir,module" 
		description="Fetches changes from git upstream">
		<gitfetch repository="${module}" />
	</target>

	<target name="archive" if="basedir,tagName,archiveName" 
		description="Creates a gzip archive from the current folder (removes any version control files)"
		depends="setup">

		<!-- Check out a specific tag, relevant if the task is run separately and the branch has advanced since the tag -->
		<foreach list="${modulesAndRoot}" param="module" target="module-checkout-tag" />

		<echo msg="### Creating '${archiveName}' archive"/>

		<php function="sys_get_temp_dir" returnProperty="systmp" />
		<property name="tmp" value="${systmp}/archiveTask/" />

		<delete dir="${tmp}" failonerror="false" quiet="true" />

		<!-- Copy into a new folder, and tar the whole folder in order to avoid toplevel extracts -->
		<copy todir="${tmp}/${archiveName}-cms-v${tagName}">
			<fileset dir="${basedir}">
				<include name="**/**" />
				<exclude name="assets/**" />
				<exclude name="buildtools/**" />
				<exclude name="mysite/local.conf.php" />
				<exclude name="mysite/db.conf.php" />
				<exclude name="**/*.log" />
				<exclude name="**/.svn/**" />
				<exclude name="**/.git/**" />
				<exclude name="**/.project" />
				<exclude name="**/.buildpath" />
				<exclude name="**/.settings" />
				<exclude name="**/.idea/**" />
				<exclude name="tools/**" />
				<exclude name="**/tests/**" />
				<exclude name="cms/docs/**" />
				<exclude name="${frameworkdir}/docs/**" />
				<exclude name="build.xml" />
				<exclude name="_ss_environment.php" />
				<exclude name="*.tar.gz" />
				<exclude name="*.zip" />
				<exclude name="behat.yml" />
				<exclude name="phpunit.*" />
				<exclude name="composer.*" />
			</fileset>
			<fileset dir="${basedir}">
				<include name="assets/Uploads" />
				<include name="assets/.htaccess" />
				<include name="assets/web.config" />
			</fileset>
		</copy>

		<!-- Write version info to the core folders (shouldn't be in version control) -->
		<echo msg="${tagName}" file="${tmp}/${archiveName}-cms-v${tagName}/${frameworkdir}/silverstripe_version" />
		<echo msg="${tagName}" file="${tmp}/${archiveName}-cms-v${tagName}/cms/silverstripe_version" />

		<!-- remove any pre-existing archives -->
		<delete file="${archiveDest}/${archiveName}-cms-v${tagName}.tar.gz" failonerror="false" quiet="true" />
		<delete file="${archiveDest}/${archiveName}-cms-v${tagName}.zip" failonerror="false" quiet="true" />

		<!-- create tar archive - CMS -->
		<tar destfile="${archiveDest}/${archiveName}-cms-v${tagName}.tar.gz" compression="gzip">
			<fileset dir="${tmp}">
				<include name="${archiveName}-cms-v${tagName}/**" />
			</fileset>
		</tar>

		<!-- create zip archive - CMS -->
		<zip destfile="${archiveDest}/${archiveName}-cms-v${tagName}.zip">
			<fileset dir="${tmp}">
				<include name="${archiveName}-cms-v${tagName}/**" />
			</fileset>
		</zip>

		<echo msg="Created archive: ${archiveDest}/${archiveName}-cms-v${tagName}.tar.gz" />
		<echo msg="##teamcity[publishArtifacts '${archiveName}-cms-v${tagName}.tar.gz']" />

		<echo msg="Created archive: ${archiveDest}/${archiveName}-cms-v${tagName}.zip" />
		<echo msg="##teamcity[publishArtifacts '${archiveName}-cms-v${tagName}.zip']" />

		<if>
			<not><istrue value="${versionLowerThan3x}" /></not>
			<then>
				<!-- Copy into a new folder, and tar the whole folder in order to avoid toplevel extracts -->
				<copy todir="${tmp}/${archiveName}-framework-v${tagName}">
					<fileset dir="${basedir}">
						<include name="**/**" />
						<exclude name="assets/**" />
						<exclude name="buildtools/**" />
						<exclude name="mysite/local.conf.php" />
						<exclude name="mysite/db.conf.php" />
						<exclude name="mysite/code/Page.php" />
						<exclude name="**/*.log" />
						<exclude name="**/.svn/**" />
						<exclude name="**/.git/**" />
						<exclude name="**/.project" />
						<exclude name="**/.buildpath" />
						<exclude name="**/.settings" />
						<exclude name="**/.idea/**" />
						<exclude name="tools/**" />
						<exclude name="**/tests/**" />
						<exclude name="cms/docs/**" />
						<exclude name="${frameworkdir}/docs/**" />
						<exclude name="build.xml" />
						<exclude name="_ss_environment.php" />
						<exclude name="*.tar.gz" />
						<exclude name="*.zip" />
						<exclude name="behat.yml" />
						<exclude name="composer.*" />
						<exclude name="phpunit.*" />
						<exclude name="cms/**" />
					</fileset>
					<fileset dir="${basedir}">
						<include name="assets/Uploads" />
						<include name="assets/.htaccess" />
						<include name="assets/web.config" />
					</fileset>
				</copy>

				<!-- Write version info to the core folders (shouldn't be in version control) -->
				<echo msg="${tagName}" file="${tmp}/${archiveName}-framework-v${tagName}/${frameworkdir}/silverstripe_version" />

				<!-- remove any pre-existing archives -->
				<delete file="${archiveDest}/${archiveName}-framework-v${tagName}.tar.gz" failonerror="false" quiet="true" />
				<delete file="${archiveDest}/${archiveName}-framework-v${tagName}.zip" failonerror="false" quiet="true" />

				<!-- create tar archive - Framework -->
				<tar destfile="${archiveDest}/${archiveName}-framework-v${tagName}.tar.gz" compression="gzip">
					<fileset dir="${tmp}">
						<include name="${archiveName}-framework-v${tagName}/**" />
					</fileset>
				</tar>

				<!-- create zip archive - Framework -->
				<zip destfile="${archiveDest}/${archiveName}-framework-v${tagName}.zip">
					<fileset dir="${tmp}">
						<include name="${archiveName}-framework-v${tagName}/**" />
					</fileset>
				</zip>

				<echo msg="Created archive: ${archiveDest}/${archiveName}-framework-v${tagName}.tar.gz" />
				<echo msg="##teamcity[publishArtifacts '${archiveName}-framework-v${tagName}.tar.gz']" />

				<echo msg="Created archive: ${archiveDest}/${archiveName}-framework-v${tagName}.tar.gz" />
				<echo msg="##teamcity[publishArtifacts '${archiveName}-framework-v${tagName}.zip']" />
			</then>
		</if>

		<!-- clear the temp file -->
		<delete dir="${tmp}" failonerror="false" quiet="true" />

	</target>

	<target name="create-branch"
		description="Creates a git branch and checks it out. Used mainly for temporary composer branches."
		if="module,branchName">
		<gitcheckout force="true" branchname="${branchName}" repository="${module}" />
	</target>

	<target name="delete-branch"
		description="Delete a git branch"
		if="tagName,branchName">
		<gitbranch forceremove="true" branchname="${branchName}" repository="${module}" />
	</target>

	<target name="upload"
		description="Uploads archives previously created through 'ping archive' to a public webhost, and notifies a group of people of the new release. Requires working public key auth on the release destination."
		depends="setup,archive"
		if="tagName">

		<echo msg="### Uploading archive" />

		<propertyprompt propertyName="confirmUpload" 
			promptText="Please unzip and sanity check the created archives. Ready for upload?" />

		<property name="release_dest" value="qa-servers@homer:/sites/ssorg-v2/www/assets/releases/" />
		<property name="release_url" value="http://silverstripe.org/assets/releases/" />
	
		<if>
			<istrue value="${versionLowerThan3x}" />
			<then>
				<exec command="scp -P 2222 SilverStripe-cms-v${tagName}.tar.gz SilverStripe-cms-v${tagName}.zip ${release_dest}" checkreturn="true" logoutput="true" />
				<echo>
Successfully uploaded to:

${release_url}SilverStripe-cms-v${tagName}.tar.gz
${release_url}SilverStripe-cms-v${tagName}.zip
				</echo>
			</then>
			<else>
				<exec command="scp -P 2222 SilverStripe-cms-v${tagName}.tar.gz SilverStripe-framework-v${tagName}.tar.gz SilverStripe-cms-v${tagName}.zip SilverStripe-framework-v${tagName}.zip ${release_dest}" checkreturn="true" logoutput="true" />
				<echo>
Successfully uploaded to:

${release_url}SilverStripe-cms-v${tagName}.tar.gz
${release_url}SilverStripe-framework-v${tagName}.tar.gz
${release_url}SilverStripe-cms-v${tagName}.zip
${release_url}SilverStripe-framework-v${tagName}.zip
				</echo>
			</else>
		</if>

	</target>

	<target name="upload-nightly"
		description="Uploads archives previously created through 'phing archive' to a public webhost">
		<property name="nightly_dest" value="qa-servers@homer:/sites/ssorg-v2/www/assets/nightlies/" />
		<exec command="scp -v -P 2222 SilverStripe-*.tar.gz ${nightly_dest}" />
		<exec command="scp -v -P 2222 SilverStripe-*.zip ${nightly_dest}" />
	</target>
	

	<target name="changelog" 
		description="Create a changelog.md file collated from multiple repos" 
		if="basedir"
		depends="setup">

		<echo msg="### Creating changelog" />
	
		<propertyprompt propertyName="changelog.fromCommit" 
			promptText="Create changelog from which tag/branch/commit?"
			useExistingValue="true" />
		<propertyprompt propertyName="changelog.toCommit" 
			promptText="Create changelog to which tag/branch/commit?"
			useExistingValue="true" />
		<propertyprompt propertyName="tagName" 
			promptText="Tag name?"
			useExistingValue="true" />

		<sschangelog fromCommit="${changelog.fromCommit}" toCommit="${changelog.toCommit}" paths="${modules}" baseDir="${basedir}" />
		<if>
			<contains string="${changelog.toCommit}" substring="alpha" />
			<then><property name="changelog.path" value="docs/en/changelogs/alpha/${tagName}.md" /></then>
			<elseif>
				<contains string="${tagName}" substring="beta" />
				<then><property name="changelog.path" value="docs/en/changelogs/beta/${tagName}.md" /></then>	
			</elseif>
			<elseif>
				<contains string="${tagName}" substring="rc" />
				<then><property name="changelog.path" value="docs/en/changelogs/rc/${tagName}.md" /></then>	
			</elseif>
			<else>
				<property name="changelog.path" value="docs/en/changelogs/${tagName}.md" />
			</else>
		</if>

		<if>
			<available file="${frameworkdir}/${changelog.path}" />	
			<then>
				<echo msg="Changelog exists in '${frameworkdir}/${changelog.path}', please add content manually." />
				<echo msg="${changelogOutput}" />
			</then>
			<else>
				<touch file="${frameworkdir}/${changelog.path}" />		
				<echo msg="# ${tagName}${line.separator}${line.separator}# Overview${line.separator}${line.separator}TODO${line.separator}${changelogOutput}" file="${frameworkdir}/${changelog.path}" />
				<echo msg="Written changelog to '${frameworkdir}/${changelog.path}'." />
			</else>
		</if>
		
		<input propertyname="_null" message="Now add a highlevel changelog to the file before I can commit it. Ready to commit and push?" />
		<exec command="git add ${changelog.path}" dir="${frameworkdir}" />
		<exec command="git commit -m 'Added ${tagName} changelog'" dir="${frameworkdir}" />
		<gitpush refspec="+refs/heads/${branchName}" repository="${frameworkdir}" />
	</target>

	<target name="translations-staging-setup">
		<propertyprompt propertyName="module" 
			promptText="Module name?"
			useExistingValue="true"
			defaultValue="framework" />
		<propertyprompt propertyName="getlocalization.${module}.project" 
			promptText="getlocalization project"
			useExistingValue="true"
			defaultValue="sapphire" />
		<propertyprompt propertyName="getlocalization.${module}.user" 
			promptText="getlocalization username"
			useExistingValue="true"
			defaultValue="silverstripe" />
		<propertyprompt propertyName="getlocalization.${module}.password" 
			promptText="getlocalization password"
			useExistingValue="true" />

		<exec command="git branch --force --track master origin/master" dir="${module}" />
		<exec command="git checkout master" dir="${module}" checkreturn="true" />
		<exec command="git fetch origin" dir="${module}" checkreturn="true" />
		<exec command="git branch --force --track translation-staging origin/translation-staging" dir="${module}" checkreturn="true" />
		<exec command="git checkout translation-staging" dir="${module}" checkreturn="true" />
	</target>

	<target name="translations-staging-teardown">
		<exec command="git checkout master" dir="${module}" checkreturn="true" />
	</target>

	<target name="translations-update-git-masterfile" 
		description="Collect translation on a module, commit them into a specialized branch and push to the origin repository."
		depends="translations-staging-setup">
		<exec command="git merge --strategy recursive -X theirs origin/master" dir="${module}" checkreturn="true" />
		<exec command="php ${frameworkdir}/cli-script.php dev/tasks/i18nTextCollectorTask module=${module} merge=true" passthru="true" checkreturn="true" />
		<exec command="git status --untracked-files=no --short" dir="${module}" outputProperty="git.status.${module}" />
		<if>
			<istrue value="${git.status.${module}}" />
			<then>
				<exec command="git add lang/*" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git commit -m 'MINOR Updated translations master'" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git push origin translation-staging" passthru="true" checkreturn="true" dir="${module}" />
			</then>
		</if>
	</target>

	<target name="translations-update-gl-masterfile" 
		description="Pushes translation master files to getlocalization.com"
		depends="translations-staging-setup">
		<exec command="curl --fail --form file=@${module}/lang/en.yml --form name='lang/en.yml' --user ${getlocalization.${module}.user}:${getlocalization.${module}.password} https://api.getlocalization.com/${getlocalization.${module}.project}/api/update-master/" passthru="true" checkreturn="true" /> 
	</target>

	<target name="translations-update-gl-contribs" description="Update translations in working copy from getlocalization.com, and commit changes to a specialized branch and push to origin repository. Note: The API requests can take a couple of minutes."
		depends="translations-staging-setup">
		<exec command="git stash" dir="${module}" />
		<updateTranslationsTask 
			glProductName="${getlocalization.${module}.project}" 
			glUser="${getlocalization.${module}.user}"
			glPassword="${getlocalization.${module}.password}"
			modulePath="${module}" 
		/>
		<exec command="git status --untracked-files=no --short" dir="${module}" outputProperty="git.status.${module}" />
		<if>
			<istrue value="${git.status.${module}}" />
			<then>
				<exec command="git add lang/*" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git add javascript/lang/*" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git commit -m 'MINOR Updated translations'" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git push origin translation-staging" dir="${module}" checkreturn="true" />
			</then>
		</if>
		<exec command="git checkout master" dir="${module}" checkreturn="true" />
		<exec command="git stash pop" dir="${module}" />
	</target>

	<target name="translations-mergeback"
		description="Copies changes from the translation staging branch back to the current branch. Doesn't use 'git merge' because the staging branch works on master. Usage: phing -Dmodule=[module] translations-mergeback">

		<if>
			<not><isset property="branch"/></not>
			<then><input propertyName="branch" defaultValue="3.0" promptChar=":">Please choose a branch to merge back to</input></then>
		</if>

		<php function="sys_get_temp_dir" returnProperty="systmp" />
		<property name="tmp" value="${systmp}/translationsMergebackTask/" />
		<exec command="git fetch origin" dir="${module}" checkreturn="true" />
		<exec command="git checkout origin/translation-staging" dir="${module}" checkreturn="true" />
		<copy todir="${tmp}/${module}">
			<fileset dir="${module}/lang" />
		</copy>
		<exec command="git branch --force --track translation-staging-${branch} origin/${branch}" dir="${module}" checkreturn="true" />
		<exec command="git checkout translation-staging-${branch}" dir="${module}" checkreturn="true" />
		<copy todir="${module}/lang" overwrite="true">
			<fileset dir="${tmp}/${module}/" />
		</copy>

		<exec command="git status --untracked-files=no --short" dir="${module}" outputProperty="git.status.${module}" />
		<if>
			<istrue value="${git.status.${module}}" />
			<then>
				<exec command="git add lang/*" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git commit -m 'Updated translations'" dir="${module}" passthru="true" checkreturn="true" />
				<exec command="git show" dir="${module}" passthru="true" />
				<if>
					<not><isset property="pushToOrigin"/></not>
					<then>
						<input propertyName="pushToOrigin" defaultValue="yes" validArgs="yes,no" promptChar=":">Please ensure ensure no malicious code has been injected in the YAML files. Push to origin?</input>
					</then>
				</if>
				<if>
					<equals arg1="${pushToOrigin}" arg2="yes" casesensitive="false" trim="true"/>
					<then>
						<exec command="git push origin translation-staging-${branch} ${branch}" passthru="true" checkreturn="true" dir="${module}" />
					</then>
				</if>
			</then>
		</if>

		<exec command="git checkout ${branch}" dir="${module}" checkreturn="true" />
		<exec command="git pull" dir="${module}" checkreturn="true" />
	</target>

	<target name="translations-sync" 
		description="Wrapper task to handle updating translations and master files, using the getlocalization.com API, committing to a specialized 'translation-staging' branch in the working copy and pushing to the origin repository. 
		Does not commit or push to the master branch, use the 'translations-mergeback' task for this purpose.">
		<foreach list="framework,cms" param="module" target="translations-update-git-masterfile" />
		<foreach list="framework,cms" param="module" target="translations-update-gl-masterfile" />
		<foreach list="framework,cms" param="module" target="translations-update-gl-contribs" />
	</target>

</project>
